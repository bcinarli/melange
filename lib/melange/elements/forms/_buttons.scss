/* @author Bilal Cinarli */

/** -------------------------------------------
    Button Styles
    ------------------------------------------- **/
/**
 * Button colors
 */
@mixin button-colors($type) {
    background-color: map-get($base-colors, $type);
    color: map-get($base-colors, #{$type}-text);

    &:hover {
        @if (map-get($base-colors, #{$type}-highlight) != null) {
            background-color: map-get($base-colors, #{$type}-highlight);
        } @else {
            background-color: darken(map-get($base-colors, $type), 7.5);
        }
        color: map-get($base-colors, #{$type}-text);
    }
}

/**
 * In most cases, using buttons with button tag allows more styling options
 * it is cross browser and meaningful. Also '.button' class is added in order to
 * get button-like elements
 */
%melange-button {
    @include prefixer(apperance, none);
    @include disable-text-select;
    @include app-transition;

    display: inline-block;
    padding: $base-input-spacing (3 * $base-input-spacing);
    border: transparent;
    line-height: normal;
    text-decoration: none;
    cursor: pointer;

    @if ($base-button-border-radius != null) {
        border-radius: $base-button-border-radius;
    }

    @include button-colors('standart');

    &:disabled,
    &.disabled {
        cursor: default;
        @include button-colors('disabled');
    }

    &:active {
        @include box-shadow(inset 0 2px 3px rgba(0, 0, 0, .3));
    }
}

/**
 * Native button elements
 * Input button elements
 */
@if ($predefined-classes) {
    button {
        @extend %melange-button;
    }

    input {
        &[type='submit'],
        &[type='reset'],
        &.#{$standard-button} {
            @extend %melange-button;
        }
    }
}

/**
 * Anchor and other elements
 */
@if ($predefined-classes) {
    .#{$standard-button} {
        @extend %melange-button;
        text-align: center;

        &,
        &:hover,
        &:focus,
        &:active {
            text-decoration: none;
        }
    }
}

@if ($support-for-ie8 == true) {
    [class*='#{$action-button}'] {
        @extend %melange-button;
    }

    [class*='#{$action-button-wrapper}'] {
        display: inherit;
        padding: inherit;
        background: inherit;
        font-weight: inherit;
        text-align: inherit;
        cursor: inherit;

        &:hover,
        &:focus,
        &:active {
            text-decoration: inherit;
        }
    }
} @else {
    [class*='#{$action-button}'] {
        &:not([class*='#{$action-button-wrapper}']) {
            @extend %melange-button;
        }
    }
}

/**
 * Action Buttons
 * specificity increased in order to overwrite [class*='#{$action-button}']:not([class*='#{$action-button-wrapper}'])
 * without using !important rule. By this, it can easily modified `.some-class .primary-action` selector
 */
%melange-primary-action {
    @include button-colors('primary');
}

%melange-secondary-action {
    @include button-colors('secondary');
}

%melange-tertiary-action {
    @include button-colors('tertiary');
}

%melange-cancel-action {
    @include button-colors('cancel');
}

@if ($predefined-classes) {
    .#{$primary-button} {
        &.#{$primary-button} {
            @include button-colors('primary');
        }
    }

    .#{$secondary-button} {
        &.#{$secondary-button} {
            @include button-colors('secondary');
        }
    }

    .#{$tertiary-button} {
        &.#{$tertiary-button} {
            @include button-colors('tertiary');
        }
    }

    .#{$cancel-button} {
        &.#{$cancel-button} {
            @include button-colors('cancel');
        }
    }
}