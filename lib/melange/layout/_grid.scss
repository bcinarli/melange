/* @author Bilal Cinarli */

/** -------------------------------------------
    Grid Columns
    ------------------------------------------- **/
/**
 * Mixin for grid columns
 *
 * Apart from our generic widths, columns have gutter for spacing and they are floated by default.
 */
@mixin grid-columns() {
    $column-width: 100/$base-grid-columns;
    $length: length($numbers);

    @if $base-grid-columns > $length {
        @error "Named numbers in your grid definitions are supported up to #{$length} columns \a but you tried to define grid columns up to #{$base-grid-columns}, you need the change your column amount \a smaller than #{$length} or update you $numbers variable in your settings files matching your column size.";
    }

    @for $i from 1 through $base-grid-columns {
        $width: $column-width * $i;
        $classname: #{$namespace}#{nth($numbers, $i)}-#{$column-name};
        $classname-plural: #{$namespace}#{nth($numbers, $i)}-#{$column-name-plural};

        @if map-has-key($_width-fragments, "#{$width}") {
            .#{$classname},
            .#{$classname-plural} {
                $mapped: map-get($_width-fragments, "#{$width}");
                @extend %#{$mapped};
            }
        } @else {
            // globally modify the defined fragment list
            $_width-fragments: map-merge($_width-fragments, ("#{$width}": $classname)) !global;

            // placeholder class for width fragment for extending classes
            %#{$classname} {
                width: $width * 1%;
            }

            .#{$classname},
            .#{$classname-plural} {
                @extend %#{$classname};
            }
        }
    }
}

/**
 * Offset settings for grid columns
 *
 * When you need much larger spacing between grid columns, you can offset a column by one or more column widths
 */
@mixin offset() {
    $column-width: 100/$base-grid-columns;
    $last-offset: $base-grid-columns - 1;

    @for $i from 1 through $last-offset {
        .#{$namespace}offset-by-#{nth($numbers, $i)} {
            margin-left: $column-width * $i * 1%;
        }
    }
}

/**
 * Row
 * Row encapsulation for columns
 */
.#{$namespace}#{$row-name} {
    @extend .group;
}

.pull {
    margin-left: -$base-gutter;
}

.push {
    margin-right: -$base-gutter;
}

.pull-push {
    margin-left: -$base-gutter;
    margin-right: -$base-gutter;
}

/**
 * Columns
 * Better controlling the width, gutter defined as right & left padding
 */
.#{$column-name} {
    @extend %column;
}

[class*="-#{$column-name}"] {
    position: relative;
    float: left;
    padding: 0 $base-gutter;

    &.#{$namespace}#{$column-name}-parent {
        // for nested columns, remove paddings for the parent grid column
        padding: 0;
    }
}

[class*="#{$column-name}-reverse"] {
    float: right;
}

/**
 * Grid Columns
 * Sets the grid columns according to column number defined in $base-grid-columns
 * @see melange/variables/_sizes.scss
 * @see settings/_sizes.scss
 */
@include grid-columns();

/**
 * Offsets
 * Sets the offsets classes according to column number defined in $base-grid-columns
 */
@include offset();